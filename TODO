Check fudforum binary protector (install.php)
Merge TODO from auditeur.

[cornac]
Handle files with ' ' space in tokenizeur.php
Add support for a version of Cornac (checking for config files, tables configurations, etc.)
add file restriction in the cornac.ini file

Move prepare to classes
Move auditeur.php to English
Move auditeur.php to upper directory

Add some more cornac tests
Apply cornac to itself
Move array style to object ? 

Upgrade error messages (Still, too often dies)

Add a log option in cornac/* to 
Add an option to clean content first
Check that one can update code with cornac (cleaning old reports)

Add multi-processing for tokenizeur/auditeur (should be easy, given the task are all concurrent and distinct)
Be able to use another PHP than the system one (specify PHP path?)
Have fast in-progress report (report built while tokenizeur is working...)
Make analyses paralelle (gearman or DB task list? Faire les fichiers récents ou qui n'ont pas été finis.. )

Add more unit tests for the auditeur (check track.php)
Move to English (messages, names...)
Check for code coverage

Move the chained list to SPL
Move the analyze into SQL only ? (That would be too slow, because of the disk)

Add a licence warning in every code source

Stop script when option is unrecognized (any of them);
Display dots when parsing the file (tokenizer)
Display dots when processing analyzers (auditeur)

[tokenizeur]
Could it be possible to chain results? Atm, one can do it manually, or creating a new analyzer
Use JMF's style

Add an option for the tokenizeur to clean the tables before working (default : append new files). 

Add support for comments

See how cache template must be used with mysql/sqlite
Sqlite is currently not up to date with mysql template

Limit usage of getNext() in regex
Add a cache for getNext() (case of applyRegex?)
Count GetNext and getPrev for stats

For each tokem note scope, class, method, variable, array, fichier
Add -log option to log information in a log file

[auditeur]
Add a log to check SQL length and optimize the bad queries 
Make auditeur i18n easily (export in external file, auto-adding new titles)

Have a treemap, showing where are the occurrences (colors?)
Change navigation in menus

Gather analyzers by type : function/method, class, file, overall (global) : we can then adapt output, and also, decide if a change in code impact this analyzer. 

Add options for auditeurs analyzers (.ini for the main, or sqlite's db, and also dictionnaries)

Export from auditeur to other format (PDF, HTML, XML, JSON, CSV, SQLITE, ODT...)

Support manage manual feedback (from where? Web/Intranet ? )

export analyzers dependencies in a graph

make the web publication one simple include
find a nice display for auditeur export in HTML/Web version

Add one main figure for each analyzers (count of info)
Have a property that tells if an analyzers is public or not

Have ratio calculated on top of analyzers (TDB)

Add web site's index.php in github

[analysers ideas]
Identify looooong literals
add 'variable' as a scope, so that we can actually work context by context

String by delimiter (especially <<< )

Detect dead code due to early return
detect infinite loop (for, while)
detect impossible condition (if (false), ...)

PHP configuration function usage

Add the 'web' version on github.
check for case without break
useless lines (like 1; array(); etc.)
Identify variables that where not initialized (less args, less foreach)

Long functions (number of tokens, number of lines...)
Compromised variables (the one affected with values from GPC)

Gather files including something else than class, function or global.... 
undefined properties used (in class) : must support hierarchy too.

Note variable type, when it is possible (intval, new, etc...)

Liste of type variable we might guess.
Variable that never gets affected (is this register_globals?)
Long list of parameters (called or defined...)
Long list of public methods

List open-ended inclusions (including files that we don't know about)

Report of dependance of a method : local variables, global ones, class, constantes, statique. 

Detect multiple definitions of functions/classes (things that should be there only once : how can we process that then?)
Detect missing elements in classes (like methods, properties, etc)
Make a array of function (are they defined? at what level?)

Make a map of a function : in, out, dependances
+ in (global, statiques, membres)
+ out (return)
+ local (variables)
+ dependances (constants, functions, classes...)

Make a function call tree (which function calls which)

Check for unused regex (from tokenizeur)

Regex usage (pcre, ereg)
Script mail usage
SQL queries lists
SQL queries protections
Upper case variables
URL manipulations

Spot PHP code in comments
Note interferences between names (variables, constantes, fonctions, classes, HTML, SQL).
Spot one lined loops (1 or 2 lines) : often, this is simple operation that will be done some other way

Gather all index used in an array (how to check 2 arrays are the same?)

Be able to search for a string, whatever the analyzer (intersect analyzers result and see what is is common)

Extract array's lists (long list of values in arrays)

functions (and files) that emit text (print, var_dump, raw text...)

methods/files/classes that misses some code.

[web]
export to dot
export to gephi
export to .ods
export to .csv
export to .yaml

[tags]
export data into dabase for easier templating
Make the export a lot more sexy
apply tagged comments in auditeur
export @TODO into a file
add a tag cloud (global, by file)
group by comment (same comment, in different files)
spot spelling mistakes
spot bad language 
display special analyse separatly from normal tagging
Make better display 


/// to dispatch

classes_undefined : cas de la valeur vide sur dotclear
Identifier les conflit de noms avec des exntesions ou des bibliothèes PHP
fonctions vides : ignore les classes abstraites, interfaces ou les classes dérivées 
détecter les foncontions en double, avec le même code ! 
$:: globals
inclusions_path : a revoir entièrement : le contenu n'est psa le bon
attention aux proriétés : sur variable ou sur méthode. 