Check fudforum binary protector (install.php)

[cornac]
process extension as case unsensitive. 
check for default values of .ini in the code, so as to make sure we have a nice liste

Add a log to show progress
Add support for a version of Cornac (checking for config files, tables configurations, etc.)
add file restriction in the cornac.ini file

Move prepare to classes
Move auditeur.php to English
Move auditeur.php to upper directory

add a script to check ext sync between class/functions/classes (missing ones?)

Add some more cornac tests
Apply cornac to itself
Move array style to object ? 

Upgrade error messages (Still, too often dies)

Add a log option in cornac/* to 
Add an option to clean content first
Check that one can update code with cornac (cleaning old reports)

Add multi-processing for tokenizeur/auditeur (should be easy, given the task are all concurrent and distinct)
Be able to use another PHP than the system one (specify PHP path?)
Have fast in-progress report (report built while tokenizeur is working...)
Make analyses paralelle (gearman or DB task list? Faire les fichiers récents ou qui n'ont pas été finis.. )

Add more unit tests for the auditeur (check track.php)
Move to English (messages, names...)
Check for code coverage

Move the chained list to SPL
Move the analyze into SQL only ? (That would be too slow, because of the disk)

Stop script when option is unrecognized (any of them);
Display dots when parsing the file (tokenizer)
Display dots when processing analyzers (auditeur)

Add a file lister, that will also display ignored files from tokenizeur (export current function to external scripts/)

[tokenizeur]
Run tokenizeur regularly on Open source project. 
check that tokenizeur works on one file only, without database

Spot php error during execution, and report it. 
Could it be possible to chain results? Atm, one can do it manually, or creating a new analyzer
Use JMF's style

Make a function call tree (which function calls which)

Add an option for the tokenizeur to clean the tables before working (default : append new files). 

Add support for comments

See how cache template must be used with mysql/sqlite
Sqlite is currently not up to date with mysql template

Limit usage of getNext() in regex
Add a cache for getNext() (case of applyRegex?)
Count GetNext and getPrev for stats

For each tokem note scope, class, method, variable, array, fichier
Add -log option to log information in a log file

see how tokclient may not stop stupidly, and keep going when there are still some tasks to do : Test this now

[auditeur]
Move auditeur to English as reference translations of analyzers's title and description
Add 'tags' propertie to every analyzers to help sort out the analyzers
Support tags in web format : on the index page, display a list of them, for filtering. 

secu and secu_functions are double
execs and exec_functions
zfClasses and zfDependencies are double 


Spot php error during execution, report it by auditeur
Add a log-time option to auditeur, to fill the auditeur.log
Make auditeur i18n easily (export in external file, auto-adding new titles)

Add typing for the analyzers : increment or global; display to web, or internal. 

Gather analyzers by type : function/method, class, file, overall (global) : we can then adapt output, and also, decide if a change in code impact this analyzer. 

Add options for auditeurs analyzers (.ini for the main, or sqlite's db, and also dictionnaries)

Export from auditeur to other format (PDF, HTML, XML, JSON, CSV, SQLITE, ODT...)

Standardization : display one groupe, another, its intersection. Should we build be able to combine the reports as groups (intersect, union, etc.) between report? Then add counting system (group by, vent by file...). 

export analyzers dependencies in a graph

make the web publication one simple include
find a nice display for auditeur export in HTML/Web version

Add one main figure for each analyzers (count of info)
Have a property that tells if an analyzers is public or not

Have ratio calculated on top of analyzers (TDB)

Support dot format for testing

[analysers ideas]
too many instructions in one line 
add 'variable' as a scope, so that we can actually work context by context

affected only variables (not used anywhere else that affectations)

String by delimiter (especially <<< )

detect infinite loop (for, while)
detect impossible condition (if (false), ...)



PHP configuration function usage

check for case without break, of switch without default. 
useless lines (like 1; array(); etc.)
Identify variables that where not initialized (less args, less foreach)

Long functions (number of tokens, number of lines...), 
literals used as parameter in function call
Compromised variables (the one affected with values from GPC)

Gather files including something else than class, function or global.... 
undefined properties used (in class) : must support hierarchy too.

Note variable type, when it is possible (intval, new, etc...)

Liste of type variable we might guess.
Variable that never gets affected (is this register_globals?)
Long list of parameters (called or defined...)
Long list of public methods

List open-ended inclusions (including files that we don't know about)

Report of dependance of a method : local variables, global ones, class, constantes, statique. 

Detect multiple definitions of functions/classes (things that should be there only once : how can we process that then?)
Detect missing elements in classes (like methods, properties, etc)
Make a array of function (are they defined? at what level?)

Make a map of a function : in, out, dependances
+ in (global, statiques, membres)
+ out (return)
+ local (variables)
+ dependances (constants, functions, classes...)

Check for unused regex (from tokenizeur)

Regex usage (pcre, ereg)
Script mail usage
SQL queries lists
SQL queries protections
Upper case variables
URL manipulations

Spot PHP code in comments
Note interferences between names (variables, constantes, fonctions, classes, HTML, SQL).
Spot one lined loops (1 or 2 lines) : often, this is simple operation that will be done some other way

Gather all index used in an array (how to check 2 arrays are the same?)

Be able to search for a string, whatever the analyzer (intersect analyzers result and see what is is common)

Extract array's lists (long list of values in arrays)
Spot multidimensional array (tableau with several dimensions...)

functions (and files) that emit text (print, var_dump, raw text...)
functions (and files) that emit error (join, mysql_connect, ) : they should be checked...

methods/files/classes that misses some code.

Spot GPC assigned to variable, then used in concatenation (security...)
Spot library dependencies, espcially PEAR, phpmailer, tinyMCE. 

Qualify scripts/contextes/folders as being controler (aka _GET, include), model (database) ou template (html, pdf, echo...).
Check that above characteristics are at the right place (by folder, by framework...)

Support some framework : drupal, joomla, zend, symfony, magento
    Support for : templating, modele, controler, usage of internals recommanded libraries

htmlentities used without encoding information

[web]
use .ini for the web folder too
export to html : should match the interactive web version
add a table list for the DOT format
export to .csv
export to .yaml
export to .xmi 
support graphic file representation (move file2png to a lib, then integrate)
+ What to do when one (un)check a group of element, when the group is not homogenous : currently, toggle invert the values, and it is not easy to understand
export to html : should match the interactive web version

[tags]
export data into dabase for easier templating
Make the export a lot more sexy
apply tagged comments in auditeur
export @TODO into a file
add a tag cloud (global, by file)
group by comment (same comment, in different files)
spot spelling mistakes
spot bad language 
display special analyse separatly from normal tagging
Make better display 

[inventaire]
add output file in .ini
internationalize
centralize connexion to the database
regex
sql requests
Cookies
Configuration variables

/// to be sorted
[fixes]
classes_undefined : cas de la valeur vide sur dotclear
Identifier les conflit de noms avec des exntesions ou des bibliothèes PHP
fonctions vides : ignore les classes abstraites, interfaces ou les classes dérivées 
détecter les foncontions en double, avec le même code ! 
$:: globals
inclusions_path : a revoir entièrement : le contenu n'est psa le bon
attention aux proriétés : sur variable ou sur méthode. 

variables utilisées : retirer les globales, et ignorer le scope 'global' dans les classes
Liste des blanches pour les eval (surveiller la valeur de retour)
block d'appels ; a revoir
pas de résultat == pas dans le sommaire!!
regex vide! : quel sens?
chemins d'inclusions
Multi-def : ignorer les fichiers en fonctions uniquement (différents contextes, pas de glboal == bibliothèque de fonctions)



formatter les colonnes en chiffres quand il le faut dans le ODS

Attention : bootstrap manquant
Ajouter la protection sur les méthodes
ajouter abstract sur les classes

Ajouter un module pour Zend_session et Zend_Request
addelement : devrait toujours récuprer la valeur retournée

aussi à tester : Library/application + public/dynamique

[dict]
Make a library of common library, and extract classes, functions, constante from them. 
extract classes from pecl and PHP code, to move into dictionary. 